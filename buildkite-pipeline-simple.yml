# Simple image-based pipeline for calculator app
# This uses the new simplified image syntax instead of Kubernetes plugin

image: "ubuntu:22.04" # The default image for the pipeline's build

steps:
  - label: ":node: Frontend tests"
    command: |
      cd frontend
      npm ci
      npm test
    image: "node:18" # This step's job uses the node:18 image

  - label: ":golang: Backend tests"
    command: |
      cd backend
      go mod download
      go test ./...
    image: "golang:1.21" # This step's job uses the golang:1.21 image

  - wait: ~

  - label: ":rocket: Start Backend Service"
    command: |
      cd backend
      go run main.go &
      BACKEND_PID=$!
      echo "Backend started with PID: $BACKEND_PID"
      echo $BACKEND_PID > /tmp/backend.pid
      sleep 5
      curl -f http://localhost:8081/health || exit 1
      echo "Backend health check passed"
    image: "golang:1.21"

  - label: ":globe_with_meridians: Start Frontend Service"
    command: |
      cd frontend
      export BACKEND_URL=http://localhost:8081
      npm start &
      FRONTEND_PID=$!
      echo "Frontend started with PID: $FRONTEND_PID"
      sleep 5
      curl -f http://localhost:3000/health || exit 1
      echo "Frontend health check passed"
    image: "node:18"

  - label: ":test_tube: Full Integration Tests"
    command: |
      # Install Node.js on golang image
      curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
      apt-get install -y nodejs

      # Start backend
      cd backend
      go run main.go &
      BACKEND_PID=$!
      sleep 3

      # Start frontend
      cd ../frontend
      npm ci
      export BACKEND_URL=http://localhost:8081
      npm start &
      FRONTEND_PID=$!
      sleep 5

      # Test API endpoints
      echo "Testing backend API..."
      curl -f -X POST http://localhost:8081/calculate \
        -H "Content-Type: application/json" \
        -d '{"a": 10, "b": 5, "operation": "add"}' || exit 1

      echo "Testing frontend proxy..."
      curl -f -X POST http://localhost:3000/api/calculate \
        -H "Content-Type: application/json" \
        -d '{"a": 15, "b": 3, "operation": "multiply"}' || exit 1

      echo "Testing health endpoints..."
      curl -f http://localhost:8081/health || exit 1
      curl -f http://localhost:3000/health || exit 1
      curl -f http://localhost:3000/api/backend-health || exit 1

      # Cleanup
      kill $BACKEND_PID $FRONTEND_PID
      echo "Integration tests passed!"
    image: "golang:1.21"

  - label: ":mag: Security Scan - JavaScript"
    command: |
      cd frontend
      npm audit --audit-level moderate
      npm audit --audit-level moderate || true
    image: "node:18"

  - wait: ~

  - label: ":rocket: Deploy to Staging"
    command: |
      # Simulate deployment to staging
      echo "Deploying calculator app to staging environment..."
      echo "Staging URL: https://calculator-staging-$${BUILDKITE_COMMIT:0:7}.example.com"

      # Create deployment manifest
      cat > deployment-staging.yaml << 'EOF'
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: calculator-staging
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: calculator
            env: staging
        template:
          metadata:
            labels:
              app: calculator
              env: staging
          spec:
            containers:
            - name: frontend
              image: calculator-frontend:latest
              ports:
              - containerPort: 3000
            - name: backend
              image: calculator-backend:latest
              ports:
              - containerPort: 8081
      EOF

      echo "Deployment manifest created"
    # No image specified - uses default ubuntu:22.04
    branches: "main develop"

  - block: ":shipit: Deploy to Production?"
    prompt: "Ready to deploy the Ghostty-themed calculator to production?"
    branches: "main"

  - label: ":globe_with_meridians: Deploy to Production"
    command: |
      echo "Deploying Ghostty-themed calculator to production..."
      echo "Production URL: https://calculator.example.com"
      echo "Build commit: $${BUILDKITE_COMMIT}"

      # Create production deployment
      cat > deployment-production.yaml << 'EOF'
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: calculator-production
      spec:
        replicas: 5
        selector:
          matchLabels:
            app: calculator
            env: production
        template:
          metadata:
            labels:
              app: calculator
              env: production
          spec:
            containers:
            - name: frontend
              image: calculator-frontend:latest
              ports:
              - containerPort: 3000
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
            - name: backend
              image: calculator-backend:latest
              ports:
              - containerPort: 8081
              resources:
                requests:
                  cpu: 200m
                  memory: 512Mi
                limits:
                  cpu: 1000m
                  memory: 1Gi
      EOF

      echo "ðŸš€ Ghostty-themed calculator deployed successfully"

      # Create deployment artifact
      echo "$${BUILDKITE_COMMIT}" > deployment-version.txt
      echo "$(date)" >> deployment-version.txt
    # No image specified - uses default ubuntu:22.04
    branches: "main"

  - label: ":package: Package application"
    command: |
      apt-get update && apt-get install -y zip

      # Create deployment package
      zip -r calculator-app-$${BUILDKITE_COMMIT}.zip \
        frontend/ backend/ README.md

      # Create artifact info
      echo "Ghostty-themed Calculator App Build" > build-info.txt
      echo "Commit: $${BUILDKITE_COMMIT}" >> build-info.txt
      echo "Branch: $${BUILDKITE_BRANCH}" >> build-info.txt
      echo "Build: $${BUILDKITE_BUILD_NUMBER}" >> build-info.txt
      echo "Date: $(date)" >> build-info.txt
      echo "Theme: Ghostty Terminal" >> build-info.txt

      ls -la *.zip *.txt
    # No image specified in this step.
    # Therefore, this step's job uses the pipeline's default ubuntu:22.04 image

